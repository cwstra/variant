"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[8106],{3905:function(a,e,t){t.d(e,{Zo:function(){return d},kt:function(){return c}});var n=t(7294);function r(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function p(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function o(a,e){if(null==a)return{};var t,n,r=function(a,e){if(null==a)return{};var t,n,r={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(r[t]=a[t]);return r}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(r[t]=a[t])}return r}var l=n.createContext({}),i=function(a){var e=n.useContext(l),t=e;return a&&(t="function"==typeof a?a(e):p(p({},e),a)),t},d=function(a){var e=i(a.components);return n.createElement(l.Provider,{value:e},a.children)},m={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},F=n.forwardRef((function(a,e){var t=a.components,r=a.mdxType,s=a.originalType,l=a.parentName,d=o(a,["components","mdxType","originalType","parentName"]),F=i(t),c=r,y=F["".concat(l,".").concat(c)]||F[c]||m[c]||s;return t?n.createElement(y,p(p({ref:e},d),{},{components:t})):n.createElement(y,p({ref:e},d))}));function c(a,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var s=t.length,p=new Array(s);p[0]=F;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=a,o.mdxType="string"==typeof a?a:r,p[1]=o;for(var i=2;i<s;i++)p[i]=t[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}F.displayName="MDXCreateElement"},7670:function(a,e,t){t.r(e),t.d(e,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return i},toc:function(){return d},default:function(){return F}});var n=t(7462),r=t(3366),s=(t(7294),t(3905)),p=["components"],o={title:"Making Variants"},l=void 0,i={unversionedId:"book/creation",id:"book/creation",isDocsHomePage:!1,title:"Making Variants",description:"Variant aims to give the user complete control over how their objects are created. A variant's constructor may perform side effects, rely on asynchronous information, or generate objects of any kind.",source:"@site/docs/book/creation.md",sourceDirName:"book",slug:"/book/creation",permalink:"/variant/docs/next/book/creation",tags:[],version:"current",frontMatter:{title:"Making Variants"},sidebar:"someSidebar",previous:{title:'Introducing "Kind of Super"',permalink:"/variant/docs/next/tutorial/part-zero"},next:{title:"Advanced Creation",permalink:"/variant/docs/next/book/advanced-creation"}},d=[{value:"Defining Bodies",id:"defining-bodies",children:[{value:"For empty bodies",id:"for-empty-bodies",children:[],level:3},{value:"For one piece of data",id:"for-one-piece-of-data",children:[],level:3},{value:"For one or more named fields",id:"for-one-or-more-named-fields",children:[],level:3},{value:"For classes",id:"for-classes",children:[],level:3}],level:2},{value:"Computed Keys",id:"computed-keys",children:[],level:2},{value:"Top-level Constructors",id:"top-level-constructors",children:[],level:2},{value:"Catalog",id:"catalog",children:[{value:"Programmatic values",id:"programmatic-values",children:[],level:3},{value:"Matching Catalogs",id:"matching-catalogs",children:[],level:3}],level:2}],m={toc:d};function F(a){var e=a.components,t=(0,r.Z)(a,p);return(0,s.kt)("wrapper",(0,n.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("p",null,"Variant aims to give the user complete control over how their objects are created. A variant's constructor may perform side effects, rely on asynchronous information, or generate objects of any kind."),(0,s.kt)("p",null,"A call to Variant must be accompanied by a ",(0,s.kt)("strong",{parentName:"p"},"template")," that expresses the possibilities of the variant. This template may be given as an object or an array."),(0,s.kt)("blockquote",null,(0,s.kt)("h4",{parentName:"blockquote",id:"object-templates"},"Object Templates"),(0,s.kt)("div",{parentName:"blockquote",className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T> | undefined): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T> | undefined): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",{parentName:"blockquote"},"When given an object template, ",(0,s.kt)("inlineCode",{parentName:"p"},"variant()")," will treat each property as one of the variations. The property's label will become the type and the value will be used to create a  factory function."),(0,s.kt)("h4",{parentName:"blockquote",id:"array-templates"},"Array Templates"),(0,s.kt)("div",{parentName:"blockquote",className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<"Hearts", () => {}, "type">;\n    Clubs: VariantCreator<"Clubs", () => {}, "type">;\n    Diamonds: VariantCreator<...>;\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<"Spades" | "Hearts" | "Clubs" | "Diamonds">(template: ("Spades" | "Hearts" | "Clubs" | "Diamonds")[]): {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<...>;\n    Clubs: VariantCreator<...>;\n    Diamonds: VariantCreator<...>;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Spades'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Hearts'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Clubs'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Diamonds'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]);")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Suit = {\n    type: "Spades";\n} | {\n    type: "Hearts";\n} | {\n    type: "Clubs";\n} | {\n    type: "Diamonds";\n}'},"Suit")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<"Hearts", () => {}, "type">;\n    Clubs: VariantCreator<"Clubs", () => {}, "type">;\n    Diamonds: VariantCreator<...>;\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<"Hearts", () => {}, "type">;\n    Clubs: VariantCreator<"Clubs", () => {}, "type">;\n    Diamonds: VariantCreator<...>;\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<"Spades" | "Hearts" | "Clubs" | "Diamonds">(template: ("Spades" | "Hearts" | "Clubs" | "Diamonds")[]): {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<...>;\n    Clubs: VariantCreator<...>;\n    Diamonds: VariantCreator<...>;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Spades"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Hearts"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Clubs"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Diamonds"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"]"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Suit = {\n    type: "Spades";\n} | {\n    type: "Hearts";\n} | {\n    type: "Clubs";\n} | {\n    type: "Diamonds";\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: VariantCreator<"Spades", () => {}, "type">;\n    Hearts: VariantCreator<"Hearts", () => {}, "type">;\n    Clubs: VariantCreator<"Clubs", () => {}, "type">;\n    Diamonds: VariantCreator<...>;\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",{parentName:"blockquote"},"In the array template, each element must be a string literal (which will become the empty variant ",(0,s.kt)("inlineCode",{parentName:"p"},"{type: T extends string})"),", or a call to ",(0,s.kt)("inlineCode",{parentName:"p"},"variation()"),", like so:"),(0,s.kt)("div",{parentName:"blockquote",className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<"RefreshAnimals" | "StartGame" | VariantCreator<"RescueAnimal", (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}, "type">>(template: ("RefreshAnimals" | ... 1 more ... | VariantCreator<...>)[]): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"([")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'RefreshAnimals'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'StartGame'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variation<"RescueAnimal", (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}>(type: "RescueAnimal", creator?: ((payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}) | undefined): VariantCreator<...>\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'RescueAnimal'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Take a single variable of type T and store as \'payload\'\n\n(alias) payload<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(_example?: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 2 more ... | undefined): (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}\nimport payload'},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),">()),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"])")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Action = {\n    type: "RefreshAnimals";\n} | {\n    type: "StartGame";\n} | {\n    type: "RescueAnimal";\n    payload: {\n        ...;\n    } | {\n        ...;\n    } | {\n        ...;\n    };\n}'},"Action")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<"RefreshAnimals" | "StartGame" | VariantCreator<"RescueAnimal", (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}, "type">>(template: ("RefreshAnimals" | ... 1 more ... | VariantCreator<...>)[]): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"[")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"RefreshAnimals"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"StartGame"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variation<"RescueAnimal", (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}>(type: "RescueAnimal", creator?: ((payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}) | undefined): VariantCreator<...>\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"RescueAnimal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Take a single variable of type T and store as \'payload\'\n\n(alias) payload<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(_example?: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 2 more ... | undefined): (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}\nimport payload'},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">())"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"]"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Action = {\n    type: "RefreshAnimals";\n} | {\n    type: "StartGame";\n} | {\n    type: "RescueAnimal";\n    payload: {\n        ...;\n    } | {\n        ...;\n    } | {\n        ...;\n    };\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";"))))))),(0,s.kt)("p",null,"The object notation is recommended most of the time. The array notation is more convenient when most members of the variant are simple types with no data, but the object notation is a little clearer to read and will ",(0,s.kt)("a",{parentName:"p",href:"../articles/documentation"},"forward documentation on the template down to the final constructors and interfaces"),"."),(0,s.kt)("h2",{id:"defining-bodies"},"Defining Bodies"),(0,s.kt)("p",null,"The body of a variant\u2014the shape of the data carried by some particular form\u2014is defined by a function. More specifically, it is defined by that function's return value. In our snake example from earlier, we returned an object containing the properties ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"pattern"),", which we sourced from our inputs. "),(0,s.kt)("p",null,"When a variant is defined, it wraps the body of the function it receives into a new function. That new variant creator has the same inputs, and ",(0,s.kt)("em",{parentName:"p"},"almost")," the same output (it merges in the ",(0,s.kt)("inlineCode",{parentName:"p"},"type")," property)."),(0,s.kt)("p",null,"Most of the time we will use helper functions like ",(0,s.kt)("inlineCode",{parentName:"p"},"payload()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"fields()"),", not because they increase our capabilities, but because they streamline how we think about and manage our domain."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"On Functions")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The beautiful thing about using a function as the definition of a variant is that it is both the simplest option and the nuclear option. Functions are capable of"),(0,s.kt)("ul",{parentName:"div"},(0,s.kt)("li",{parentName:"ul"},"zero, one, multiple, ",(0,s.kt)("a",{parentName:"li",href:"https://www.typescriptlang.org/docs/handbook/2/functions.html#optional-parameters"},"optional/default"),", and ",(0,s.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Variadic_function"},"variadic")," parameters. "),(0,s.kt)("li",{parentName:"ul"},"arbitrary processing logic like validation."),(0,s.kt)("li",{parentName:"ul"},"asynchronous calls."),(0,s.kt)("li",{parentName:"ul"},"side effects like logging."),(0,s.kt)("li",{parentName:"ul"},"referencing ",(0,s.kt)("a",{parentName:"li",href:"https://basarat.gitbook.io/typescript/recap/closure"},"closures"),".")),(0,s.kt)("p",{parentName:"div"},"Adding to that power, the objects they return may contain internal state, methods, and property accessors. In the few cases that isn't sufficient variants can also be generated from full classes with ",(0,s.kt)("inlineCode",{parentName:"p"},"construct()"),"."))),(0,s.kt)("h3",{id:"for-empty-bodies"},"For empty bodies"),(0,s.kt)("p",null,"To express a case that has no data, use ",(0,s.kt)("inlineCode",{parentName:"p"},"nil"),", or ",(0,s.kt)("inlineCode",{parentName:"p"},"{}"),". Pick whichever speaks to you."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    RefreshAnimals: {};\n    StartGame: () => {};\n    RescueAnimal: (payload: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    } | {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    } | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => {\n        ...;\n    };\n}>(template: {\n    RefreshAnimals: {};\n    StartGame: () => {};\n    RescueAnimal: (payload: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    } | {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    } | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) RefreshAnimals: {}"},"RefreshAnimals"),": {},")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) StartGame: () => {}"},"StartGame"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Template to create an empty variation (`{type: 'literal'}`).\n\n(alias) const nil: () => {}\nimport nil"},"nil")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) RescueAnimal: (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    payload: {\n        ...;\n    } | {\n        ...;\n    } | {\n        ...;\n    };\n}'},"RescueAnimal"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Take a single variable of type T and store as \'payload\'\n\n(alias) payload<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(_example?: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | undefined): (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}\nimport payload'},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),">(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Action: {\n    RefreshAnimals: VariantCreator<"RefreshAnimals", () => {}, "type">;\n    StartGame: VariantCreator<"StartGame", () => {}, "type">;\n    RescueAnimal: VariantCreator<"RescueAnimal", (payload: {\n        ...;\n    } | ... 1 more ... | {\n        ...;\n    }) => {\n        ...;\n    }, "type">;\n}'},"Action")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    RefreshAnimals: {};\n    StartGame: () => {};\n    RescueAnimal: (payload: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    } | {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    } | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => {\n        ...;\n    };\n}>(template: {\n    RefreshAnimals: {};\n    StartGame: () => {};\n    RescueAnimal: (payload: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    } | {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    } | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) RefreshAnimals: {}"},"RefreshAnimals"),": {},")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) StartGame: () => {}"},"StartGame"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Template to create an empty variation (`{type: 'literal'}`).\n\n(alias) const nil: () => {}\nimport nil"},"nil")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) RescueAnimal: (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    payload: {\n        ...;\n    } | {\n        ...;\n    } | {\n        ...;\n    };\n}'},"RescueAnimal"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Take a single variable of type T and store as \'payload\'\n\n(alias) payload<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(_example?: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | undefined): (payload: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    ...;\n}\nimport payload'},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"Some syntax highlighters will interpret ",(0,s.kt)("inlineCode",{parentName:"p"},"{}")," as a block and change the color of the key. If this bothers you, use ",(0,s.kt)("inlineCode",{parentName:"p"},"nil")),(0,s.kt)("h3",{id:"for-one-piece-of-data"},"For one piece of data"),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"payload<T>()"),", ",(0,s.kt)("em",{parentName:"p"},"or")," use a simple function to retain the name."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) function payload<T>(_example?: T | undefined): (payload: T) => {\n    payload: T;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Something: {\n    first: VariantCreator<"first", (payload: string) => {\n        payload: string;\n    }, "type">;\n    second: VariantCreator<"second", (label: string) => {\n        label: string;\n    }, "type">;\n}'},"Something")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    first: (payload: string) => {\n        payload: string;\n    };\n    second: (label: string) => {\n        label: string;\n    };\n}>(template: {\n    first: (payload: string) => {\n        payload: string;\n    };\n    second: (label: string) => {\n        label: string;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) first: (payload: string) => {\n    payload: string;\n}"},"first"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) payload<string>(_example?: string | undefined): (payload: string) => {\n    payload: string;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) second: (label: string) => {\n    label: string;\n}"},"second")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) label: string"},"label")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) label: string"},"label")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Something = {\n    type: "first";\n    payload: string;\n} | {\n    type: "second";\n    label: string;\n}',style:{borderBottom:"solid 2px lightgrey"}},"Something")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Something: {\n    first: VariantCreator<"first", (payload: string) => {\n        payload: string;\n    }, "type">;\n    second: VariantCreator<"second", (label: string) => {\n        label: string;\n    }, "type">;\n}'},"Something")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"        "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'type Something = {\n    type: "first";\n    payload: string;\n} | {\n    type: "second";\n    label: string;\n}'))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) function payload<T>(_example?: T | undefined): (payload: T) => {\n    payload: T;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Something: {\n    first: VariantCreator<"first", (payload: string) => {\n        payload: string;\n    }, "type">;\n    second: VariantCreator<"second", (label: string) => {\n        label: string;\n    }, "type">;\n}'},"Something")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    first: (payload: string) => {\n        payload: string;\n    };\n    second: (label: string) => {\n        label: string;\n    };\n}>(template: {\n    first: (payload: string) => {\n        payload: string;\n    };\n    second: (label: string) => {\n        label: string;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) first: (payload: string) => {\n    payload: string;\n}"},"first"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) payload<string>(_example?: string | undefined): (payload: string) => {\n    payload: string;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<string>()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) second: (label: string) => {\n    label: string;\n}"},"second"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) label: string"},"label")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string)"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) label: string"},"label")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Something = {\n    type: "first";\n    payload: string;\n} | {\n    type: "second";\n    label: string;\n}',style:{borderBottom:"solid 2px lightgrey"}},"Something")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Something: {\n    first: VariantCreator<"first", (payload: string) => {\n        payload: string;\n    }, "type">;\n    second: VariantCreator<"second", (label: string) => {\n        label: string;\n    }, "type">;\n}'},"Something")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"        "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'type Something = {\n    type: "first";\n    payload: string;\n} | {\n    type: "second";\n    label: string;\n}')))))),(0,s.kt)("h3",{id:"for-one-or-more-named-fields"},"For one or more named fields"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"fields<T>()")," function from earlier allows us to do this."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T> | undefined): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T> | undefined): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h3",{id:"for-classes"},"For classes"),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"construct()")," to work with classes. This function can accept anonymous class definitions, or work with previously defined classes in-scope to support ",(0,s.kt)("inlineCode",{parentName:"p"},"instanceof")," checks down the road. Let's make a class-based dog with some internal state"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog")," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"constructor"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog.barkVolume: number"},"barkVolume")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"number")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ) { }")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"public"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Dog.bark(): void"},"bark")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"() {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// can access class members.")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const msg: "BARK" | "bark"'},"msg")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," this."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog.barkVolume: number"},"barkVolume")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"5"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'BARK'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'bark'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const msg: "BARK" | "bark"'},"msg")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    }")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"constructor"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog.barkVolume: number"},"barkVolume")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"number")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"public"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Dog.bark(): void"},"bark")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," can access class members.")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const msg: "BARK" | "bark"'},"msg")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"this"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog.barkVolume: number"},"barkVolume")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"5"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"BARK"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"bark"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const msg: "BARK" | "bark"'},"msg")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("p",null,"This class can be incorporated in our new version of ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    dog: (barkVolume: number) => Dog;\n    cat: () => (Anonymous class);\n    snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class);\n}>(template: {\n    dog: (barkVolume: number) => Dog;\n    cat: () => (Anonymous class);\n    snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class);\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (barkVolume: number) => Dog"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof Dog>(cls: typeof Dog): (barkVolume: number) => Dog\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"),")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: () => (Anonymous class)"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof (Anonymous class)>(cls: typeof (Anonymous class)): () => (Anonymous class)\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"public"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).furnitureDamaged: number"},"furnitureDamaged")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    }),")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class)"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof (Anonymous class)>(cls: typeof (Anonymous class)): (color: string, isStriped?: boolean | undefined) => (Anonymous class)\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"constructor"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).color: string"},"color")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).isStriped: boolean"},"isStriped")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"boolean"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ) { }")),(0,s.kt)("div",{parentName:"code",className:"line dim"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"get"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).skin: string"},"skin")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"() {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"this."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).isStriped: boolean"},"isStriped")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"&&"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped '"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}${"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"this."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).color: string"},"color")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        }")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    })")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ClassyAnimal = {\n    type: "dog";\n    bark: () => void;\n} | {\n    type: "cat";\n    furnitureDamaged: number;\n} | {\n    type: "snake";\n    readonly skin: string;\n}'},"ClassyAnimal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;")),(0,s.kt)("div",{parentName:"code",className:"line dim"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (barkVolume: number) => {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"4"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");")),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const isDog: boolean"},"isDog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"instanceof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog"),"; "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// true!"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    dog: (barkVolume: number) => Dog;\n    cat: () => (Anonymous class);\n    snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class);\n}>(template: {\n    dog: (barkVolume: number) => Dog;\n    cat: () => (Anonymous class);\n    snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class);\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (barkVolume: number) => Dog"},"dog"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof Dog>(cls: typeof Dog): (barkVolume: number) => Dog\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: () => (Anonymous class)"},"cat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof (Anonymous class)>(cls: typeof (Anonymous class)): () => (Anonymous class)\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"public"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (color: string, isStriped?: boolean | undefined) => (Anonymous class)"},"snake"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) construct<typeof (Anonymous class)>(cls: typeof (Anonymous class)): (color: string, isStriped?: boolean | undefined) => (Anonymous class)\nimport construct"},"construct")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"class"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"constructor"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).color: string"},"color")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"private"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).isStriped: boolean"},"isStriped")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"boolean"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," { }")),(0,s.kt)("div",{parentName:"code",className:"line dim"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"get"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).skin: string"},"skin")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"this"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).isStriped: boolean"},"isStriped")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"&&"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"this"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) (Anonymous class).color: string"},"color")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        }")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ClassyAnimal = {\n    type: "dog";\n    bark: () => void;\n} | {\n    type: "cat";\n    furnitureDamaged: number;\n} | {\n    type: "snake";\n    readonly skin: string;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**. Use as\r\n\r\n```ts\r\nexport type SomeVariant<T extends TypeNames<typeof SomeVariant> = undefined> = VariantOf<typeof SomeVariant, T>;\r\n```\r\n\r\nThis allows the type `SomeVariant` to represent the union and the type `SomeVariant<'SomeType'>` to capture\r\none specific variation.\r\n\r\n### Minimal form\r\n```ts\r\nexport type SomeVariant = VariantOf<typeof SomeVariant>;\r\n```\r\nSome users who prioritize brevity and do not mind using `Extract<SomeVariant, Record<'type', 'SomeType'>>` to\r\nexpress a specific variation may prefer this simplified format.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<VariantTypeSpread<T>[keyof T]>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line dim"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ClassyAnimal: {\n    dog: VariantCreator<"dog", (barkVolume: number) => Dog, "type">;\n    cat: VariantCreator<"cat", () => (Anonymous class), "type">;\n    snake: VariantCreator<...>;\n}'},"ClassyAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (barkVolume: number) => {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"(4)"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line highlight"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const isDog: boolean"},"isDog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: {\n    type: "dog";\n    bark: () => void;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"instanceof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"class Dog"},"Dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"; "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," true!")))))),(0,s.kt)("h2",{id:"computed-keys"},"Computed Keys"),(0,s.kt)("p",null,"In the earlier examples we defined a variant template as an object literal. The keys of the literal are what will become the types of each variant. However, the library is perfectly happy to accept computed keys including constants objects or string literals."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: "snake"'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"as"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: "snake"'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]: ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: "snake"'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"as"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog"),"]: ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat"),"]: ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\r\n\r\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ["),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    readonly dog: "dog";\n    readonly cat: "cat";\n    readonly snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: "snake"'},"snake"),"]: "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"It's also possible to use a string enum to similar effect."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"enum"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"enum AniType"},"AniType")," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.dog = "dog"'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.cat = "cat"'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.snake = "snake"'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"enum"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"enum AniType"},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.dog = "dog"'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.cat = "cat"'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(enum member) AniType.snake = "snake"'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"AniType")," definition would be a good use of catalog."),(0,s.kt)("div",{parentName:"div",className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    dog: "dog";\n    cat: "cat";\n    snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"dog" | "cat" | "snake">(strings: ("dog" | "cat" | "snake")[]): {\n    dog: "dog";\n    cat: "cat";\n    snake: "snake";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]);"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AniType: {\n    dog: "dog";\n    cat: "cat";\n    snake: "snake";\n}'},"AniType")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"dog" | "cat" | "snake">(strings: ("dog" | "cat" | "snake")[]): {\n    dog: "dog";\n    cat: "cat";\n    snake: "snake";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"]"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))))),(0,s.kt)("h2",{id:"top-level-constructors"},"Top-level Constructors"),(0,s.kt)("p",null,"I find great utility in consolidating the relevant cases, but I'm sympathetic to the desire to have these tag constructors as top-level functions in the scope, rather than being under ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal"),". This works just fine. The object ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal")," is very intentionally just a loose collection of the constructors, destructure or regroup it as you wish."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type">'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const garfield: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}'},"garfield")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Garfield'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"12"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const echidna: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"echidna")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: (name: string, pattern?: string | undefined) => {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Echidna'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'speckled'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type">'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const garfield: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}'},"garfield")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Garfield"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"12"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const echidna: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"echidna")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: (name: string, pattern?: string | undefined) => {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Echidna"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"speckled"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"The instance type for ",(0,s.kt)("inlineCode",{parentName:"p"},"cat")," can be retrieved as ",(0,s.kt)("inlineCode",{parentName:"p"},"ReturnType<typeof cat>"),". However. there's nothing wrong with exporing the constructors at the top level and also exporting the Animal type. Doing so means consumers still have the ability to type something as ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal<'cat'>"),", which will save you some typing and duplication of effort."),(0,s.kt)("p",null,"Under the hood, ",(0,s.kt)("inlineCode",{parentName:"p"},"variant()")," creates variant constructors by calling the function ",(0,s.kt)("inlineCode",{parentName:"p"},"variation()"),". This function can be used directly to create variant constructors at the top level."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variation: <T extends string, F extends Func = () => {}>(type: T, creator?: F | undefined) => VariantCreator<T, F extends VariantCreator<string, infer VF, "type"> ? VF : F, "type">\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variation<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}>(type: "snake", creator?: ((name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}) | undefined): VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",  ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}));")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const echidna: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"echidna")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: (name: string, pattern?: string | undefined) => {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Echidna'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",  "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'speckled'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variation: <T extends string, F extends Func = () => {}>(type: T, creator?: F | undefined) => VariantCreator<T, F extends VariantCreator<string, infer VF, "type"> ? VF : F, "type">\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variation<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}>(type: "snake", creator?: ((name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}) | undefined): VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">\nimport variation'},"variation")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",  "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const echidna: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"echidna")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'const snake: (name: string, pattern?: string | undefined) => {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Echidna"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",  "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"speckled"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h2",{id:"catalog"},"Catalog"),(0,s.kt)("p",null,"Use a catalog when you don't need state and just want a group of literals types. These objects are essentially maps of constants. The most common case takes an array of strings. In this scenario, it is essentially the same as the common ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/basarat/typescript-book/blob/master/docs/types/literal-types.md"},(0,s.kt)("inlineCode",{parentName:"a"},"strEnum"))," function."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"Spades" | "Hearts" | "Clubs" | "Diamonds">(strings: ("Spades" | "Hearts" | "Clubs" | "Diamonds")[]): {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Spades'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Hearts'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Clubs'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Diamonds'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]);")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Suit = "Spades" | "Hearts" | "Clubs" | "Diamonds"'},"Suit")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"keyof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"Spades" | "Hearts" | "Clubs" | "Diamonds">(strings: ("Spades" | "Hearts" | "Clubs" | "Diamonds")[]): {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Spades"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Hearts"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Clubs"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Diamonds"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"]"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Suit = "Spades" | "Hearts" | "Clubs" | "Diamonds"'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"keyof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Suit: {\n    Spades: "Spades";\n    Hearts: "Hearts";\n    Clubs: "Clubs";\n    Diamonds: "Diamonds";\n}'},"Suit")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"The catalog function can also work with different types, like numbers in a key-value map:"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const logLevels: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}"},"logLevels")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Define the catalog object manually.\r\n\r\nUse to enforce a consistent type for all values.\n\n(alias) catalog<{\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}>(catalog: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}): {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n} (+2 overloads)\nimport catalog"},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) trace: number"},"trace"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"100"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) debug: number"},"debug"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"200"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) info: number"},"info"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"300"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) warn: number"},"warn"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"400"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) error: number"},"error"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"500"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) fatal: number"},"fatal"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"600"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const logLevels: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}"},"logLevels")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Define the catalog object manually.\r\n\r\nUse to enforce a consistent type for all values.\n\n(alias) catalog<{\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}>(catalog: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}): {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n} (+2 overloads)\nimport catalog"},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) trace: number"},"trace"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"100"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) debug: number"},"debug"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"200"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) info: number"},"info"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"300"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) warn: number"},"warn"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"400"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) error: number"},"error"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"500"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) fatal: number"},"fatal"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"600"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"The advantage being the catalog function will enforce that all values are of the same type, ensuring that a stray ",(0,s.kt)("inlineCode",{parentName:"p"},"'600'")," will raise an error."),(0,s.kt)("h3",{id:"programmatic-values"},"Programmatic values"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"logLevels")," values follow a strict formula\u2014the index times ",(0,s.kt)("inlineCode",{parentName:"p"},"100"),". Catalog allows us to express this programmatically."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const logLevels: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}"},"logLevels")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object based on some calculation\n\n(alias) catalog<"trace" | "debug" | "info" | "warn" | "error" | "fatal", (_: "trace" | "debug" | "info" | "warn" | "error" | "fatal", i: number) => number>(strings: ("trace" | "debug" | "info" | "warn" | "error" | "fatal")[], factory: (_: "trace" | "debug" | "info" | "warn" | "error" | "fatal", i: number) => number): {\n    ...;\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"   ["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'trace'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'debug'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'info'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'warn'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'error'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'fatal'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"],")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"   ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: "trace" | "debug" | "info" | "warn" | "error" | "fatal"'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) i: number"},"i")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) i: number"},"i")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"*"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"100")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const logLevels: {\n    trace: number;\n    debug: number;\n    info: number;\n    warn: number;\n    error: number;\n    fatal: number;\n}"},"logLevels")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object based on some calculation\n\n(alias) catalog<"trace" | "debug" | "info" | "warn" | "error" | "fatal", (_: "trace" | "debug" | "info" | "warn" | "error" | "fatal", i: number) => number>(strings: ("trace" | "debug" | "info" | "warn" | "error" | "fatal")[], factory: (_: "trace" | "debug" | "info" | "warn" | "error" | "fatal", i: number) => number): {\n    ...;\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"(")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"   ["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"trace"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"debug"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"info"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"warn"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"error"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"fatal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"],")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"   "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: "trace" | "debug" | "info" | "warn" | "error" | "fatal"'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) i: number"},"i")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) i: number"},"i")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"*"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"100")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"This version of the code can be shorter and is often more resilient against refactoring."),(0,s.kt)("h3",{id:"matching-catalogs"},"Matching Catalogs"),(0,s.kt)("p",null,"In order to streamline domain-modeling, literal unions (such as those from ",(0,s.kt)("inlineCode",{parentName:"p"},"catalog()"),") may be directly processed through ",(0,s.kt)("inlineCode",{parentName:"p"},"match()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"matcher()"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"cat" | "dog" | "snake">(strings: ("cat" | "dog" | "snake")[]): {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"]);")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type animal = "cat" | "dog" | "snake"'},"animal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"keyof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const fittingPokemon: (a: animal) => string"},"fittingPokemon")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) a: "cat" | "dog" | "snake"'},"a")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type animal = "cat" | "dog" | "snake"'},"animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Main match overload\n\n(alias) match<Record<"type", "cat"> | Record<"type", "dog"> | Record<"type", "snake">, {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n}, "cat" | ... 1 more ... | "snake">(target: "cat" | ... 4 more ... | Record<...>, handler: {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n} | ((t: Record<...> | ... 1 more ... | Record<...>) => {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n})): string (+1 overload)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) a: "cat" | "dog" | "snake"'},"a")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", { ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: (_: Record<"type", "cat">) => string'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "cat">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Meowth'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: Record<"type", "dog">) => string'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "dog">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Arcanine'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: Record<"type", "snake">) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "snake">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Ekans'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Create a catalog object from a set of strings.\n\n(alias) catalog<"cat" | "dog" | "snake">(strings: ("cat" | "dog" | "snake")[]): {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n} (+2 overloads)\nimport catalog'},"catalog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"]"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type animal = "cat" | "dog" | "snake"'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"keyof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const fittingPokemon: (a: animal) => string"},"fittingPokemon")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) a: "cat" | "dog" | "snake"'},"a")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type animal = "cat" | "dog" | "snake"'},"animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Main match overload\n\n(alias) match<Record<"type", "cat"> | Record<"type", "dog"> | Record<"type", "snake">, {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n}, "cat" | ... 1 more ... | "snake">(target: "cat" | ... 4 more ... | Record<...>, handler: {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n} | ((t: Record<...> | ... 1 more ... | Record<...>) => {\n    cat: (_: Record<"type", "cat">) => string;\n    dog: (_: Record<"type", "dog">) => string;\n    snake: (_: Record<...>) => string;\n})): string (+1 overload)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) a: "cat" | "dog" | "snake"'},"a")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", { ")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: (_: Record<"type", "cat">) => string'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "cat">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Meowth"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: Record<"type", "dog">) => string'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "dog">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Arcanine"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: Record<"type", "snake">) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: Record<"type", "snake">'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Ekans"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"Other library functions can be accessed by elevating the literal union to a full discriminated union through ",(0,s.kt)("inlineCode",{parentName:"p"},"ofLiteral()"),"."))}F.isMDXComponent=!0}}]);