"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[6705],{3905:function(n,e,a){a.d(e,{Zo:function(){return d},kt:function(){return F}});var t=a(7294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function s(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?s(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function p(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},s=Object.keys(n);for(t=0;t<s.length;t++)a=s[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(t=0;t<s.length;t++)a=s[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var o=t.createContext({}),l=function(n){var e=t.useContext(o),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},d=function(n){var e=l(n.components);return t.createElement(o.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,s=n.originalType,o=n.parentName,d=p(n,["components","mdxType","originalType","parentName"]),c=l(a),F=r,y=c["".concat(o,".").concat(F)]||c[F]||m[F]||s;return a?t.createElement(y,i(i({ref:e},d),{},{components:a})):t.createElement(y,i({ref:e},d))}));function F(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=a.length,i=new Array(s);i[0]=c;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=n,p.mdxType="string"==typeof n?n:r,i[1]=p;for(var l=2;l<s;l++)i[l]=a[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5967:function(n,e,a){a.r(e),a.d(e,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var t=a(7462),r=a(3366),s=(a(7294),a(3905)),i=["components"],p={title:"Inspection"},o=void 0,l={unversionedId:"book/inspection",id:"book/inspection",isDocsHomePage:!1,title:"Inspection",description:"`twoslash include animal",source:"@site/docs/book/inspection.md",sourceDirName:"book",slug:"/book/inspection",permalink:"/variant/docs/next/book/inspection",tags:[],version:"current",frontMatter:{title:"Inspection"},sidebar:"someSidebar",previous:{title:"Procedural Generation",permalink:"/variant/docs/next/book/procedural-generation"},next:{title:"Organization",permalink:"/variant/docs/next/book/organization"}},d=[{value:"<code>type</code> equality",id:"type-equality",children:[]},{value:"<code>isType()</code>",id:"istype",children:[]},{value:"<code>types()</code>",id:"types",children:[]},{value:"<code>typeCatalog()</code>",id:"typecatalog",children:[]},{value:"<code>inferTypes()</code>",id:"infertypes",children:[]}],m={toc:d};function c(n){var e=n.components,a=(0,r.Z)(n,i);return(0,s.kt)("wrapper",(0,t.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("p",null,"Most of the time to do something useful with a discriminated union we'll need to examine its members and their types. Matching is a form of inspection, but is often geared toward processing. Here let's focus on some of the ways to analyze these objects."),(0,s.kt)("h3",{id:"type-equality"},(0,s.kt)("inlineCode",{parentName:"h3"},"type")," equality"),(0,s.kt)("p",null,"Classic. Supports type narrowing"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) type: "cat" | "dog" | "snake"'},"type")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"==="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}',style:{borderBottom:"solid 2px lightgrey"}},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"                        "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}')),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) type: "cat" | "dog" | "snake"'},"type")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"==="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}',style:{borderBottom:"solid 2px lightgrey"}},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall"),";")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"                        "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}')),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("h3",{id:"istype"},(0,s.kt)("inlineCode",{parentName:"h3"},"isType()")),(0,s.kt)("p",null,"A ",(0,s.kt)("em",{parentName:"p"},"user-defined type guard")," that can answer whether or not an instance of a variant is of a given type. Takes the type as either a string literal or the variant creator."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "dog">(object: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | null | undefined, type: "dog"): object is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")) {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "dog">(object: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | null | undefined, type: "dog"): object is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall"),";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("h4",{id:"variant-creator"},"Variant creator"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">>(object: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 3 more ... | undefined, type: VariantCreator<...>): object is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")) {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"if"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">>(object: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 3 more ... | undefined, type: VariantCreator<...>): object is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballColor: string | undefined"},"ballColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall"),";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("h4",{id:"point-free-overload"},"Point-free overload"),(0,s.kt)("p",null,"Note, this also works as a higher order function for filters."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dogs: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}[]'},"dogs")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animals: ({\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n})[]'},"animals")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Returns the elements of an array that meet the condition specified in a callback function.\n\n(method) Array<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }>.filter<{\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}>(predicate: (value: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, index: number, array: ({\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n})[]) => value is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}, thisArg?: any): {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}[] (+1 overload)'},"filter")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">>(type: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">): <O>(object: O) => object is Extract<...> (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"));"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const dogs: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}[]'},"dogs")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animals: ({\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n})[]'},"animals")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Returns the elements of an array that meet the condition specified in a callback function.\n\n(method) Array<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }>.filter<{\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}>(predicate: (value: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, index: number, array: ({\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n})[]) => value is {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}, thisArg?: any): {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}[] (+1 overload)'},"filter")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) isType<VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">>(type: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">): <O>(object: O) => object is Extract<...> (+1 overload)\nimport isType'},"isType")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h3",{id:"types"},(0,s.kt)("inlineCode",{parentName:"h3"},"types()")),(0,s.kt)("p",null,"Get a list of the types in a variant. For ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal"),", it would return ",(0,s.kt)("inlineCode",{parentName:"p"},"['cat', 'dog', 'snake']"),". The order is... complicated. Expect it to be unspecified to be safe, but in some modern stacks it will match the order of the template. "),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animalTypes: TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>[]'},"animalTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) types<{\n    ...;\n}>(content: {\n    ...;\n}): TypesOf<...>[] (+1 overload)\nimport types"},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animalTypes: TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>[]'},"animalTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) types<{\n    ...;\n}>(content: {\n    ...;\n}): TypesOf<...>[] (+1 overload)\nimport types"},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h3",{id:"typecatalog"},(0,s.kt)("inlineCode",{parentName:"h3"},"typeCatalog()")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"types()")," function returns an array. This is often appropriate, but suffers from O(n) membership checking. ",(0,s.kt)("inlineCode",{parentName:"p"},"typeCatalog()"),", by contrast, returns a constant object of string literals (a.k.a. what you get it if you call ",(0,s.kt)("inlineCode",{parentName:"p"},"catalog(types(_____))"),"on some variant."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animalTypes"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"typeCatalog"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animalTypes"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," typeCatalog"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("h3",{id:"infertypes"},(0,s.kt)("inlineCode",{parentName:"h3"},"inferTypes()")),(0,s.kt)("p",null,"Create a proxy catalog for a variant based on the instance."),(0,s.kt)("p",null,"While any instance of an animal will only ever have one string literal as its the uniquely identifying property at runtime, at compile time TypeScript can see multiple possibilities in that type and will express them as a union. "),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const inferTypes: <T extends Record<"type", string>>(instance: T) => { [P in T["type"]]: P; }\nimport inferTypes'},"inferTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Twix'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"as"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) inferTypes<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(instance: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): {\n    ...;\n}\nimport inferTypes'},"inferTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"); "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// cat")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) type: "cat" | "dog" | "snake"'},"type")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"==="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"); "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// true"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const inferTypes: <T extends Record<"type", string>>(instance: T) => { [P in T["type"]]: P; }\nimport inferTypes'},"inferTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Twix"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"as"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) inferTypes<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(instance: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): {\n    ...;\n}\nimport inferTypes'},"inferTypes")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: "cat"'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"; "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," cat")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var console: Console"},"console")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(method) Console.log(...data: any[]): void"},"log")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) type: "cat" | "dog" | "snake"'},"type")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"==="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ani: {\n    cat: "cat";\n    dog: "dog";\n    snake: "snake";\n}'},"ani")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: "dog"'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"; "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," true")))))),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Proxy limitations")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"As a proxy object, this has no runtime information about the full list of types. Unlike a typical type catalog, we ",(0,s.kt)("em",{parentName:"p"},"cannot")," use ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.keys()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.values()"),' to capture or enumerate the items contained within. Proxies are a clever trick. The string "dog" becomes real only when we used the string "dog" to reference the property. It just spat back what we asked for.'))))}c.isMDXComponent=!0}}]);