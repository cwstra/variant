(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{148:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(1),r=n(9),i=(n(0),n(176)),o={id:"that-type",title:"That type tho..."},c={id:"articles/that-type",title:"That type tho...",description:"I admit this type I ask you to include is... *a bit much.*\r",source:"@site/docs\\articles\\that-type.md",permalink:"/variant/docs/articles/that-type",sidebar:"someSidebar",previous:{title:"Cheat Sheet",permalink:"/variant/docs/cheat"},next:{title:"API Reference",permalink:"/variant/docs/api"}},l=[{value:"Breaking it down",id:"breaking-it-down",children:[{value:"Why is this necessary?",id:"why-is-this-necessary",children:[]}]}],p={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"I admit this type I ask you to include is... ",Object(i.b)("em",{parentName:"p"},"a bit much.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"export type Animal<T extends TypeNames<typeof Animal> = undefined>\n     = VariantOf<typeof Animal, T>;\n")),Object(i.b)("p",null,"I'll tell you straight: You dont have to use it. But I think you should."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It is what enables the ",Object(i.b)("inlineCode",{parentName:"li"},"Animal<'cat'>")," syntax with auto-completion for the generic property"),Object(i.b)("li",{parentName:"ul"},"Your consumers ",Object(i.b)("em",{parentName:"li"},"do not experience the complexity of this type definition"),". It shares a name with the module, so it will be quietly imported alongside the module bringing all the benefits to the user with none of the cost."),Object(i.b)("li",{parentName:"ul"},"The tedium of this boilerplate is stripped by using snippets. ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/variant/docs/cheat"}),"I provide some here."))),Object(i.b)("h2",{id:"breaking-it-down"},"Breaking it down"),Object(i.b)("p",null,"Here's what's going on."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"VariantOf<VariantDef, Type>")," will generate the discriminated union from the object that is the variant module. The second parameter ",Object(i.b)("inlineCode",{parentName:"p"},"Type")," will be evaluated as either"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A valid type of the variant (",Object(i.b)("inlineCode",{parentName:"li"},"Animal"),")",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"which returns just the specific type ",Object(i.b)("inlineCode",{parentName:"li"},"Animal<'snake'>")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"undefined"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"which returns the union ",Object(i.b)("inlineCode",{parentName:"li"},"Animal<'dog'> | Animal<'cat'> | Animal<'snake'>"))))),Object(i.b)("p",null,"If you want to, you can just do this:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type Animal = VariantOf<typeof Animal>;\n")),Object(i.b)("p",null,"But then you can't get or pass the subtypes. So let's make our new type generic."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type Animal<T> = VariantOf<typeof Animal, T>;\n")),Object(i.b)("p",null,"Now we can do ",Object(i.b)("inlineCode",{parentName:"p"},"Animal<'snake'>")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Animal<undefined>")," but I can't reference just the type ",Object(i.b)("inlineCode",{parentName:"p"},"Animal")," anymore, which I quite liked."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type Animal<T = undefined> = VariantOf<typeof Animal, T>;\n")),Object(i.b)("p",null,"So now I can do ",Object(i.b)("inlineCode",{parentName:"p"},"Animal<'snake'>")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Animal"),". Great! But I can also do ",Object(i.b)("inlineCode",{parentName:"p"},"Animal<'Rose'>")," which... doesn't make sense. This will require us to restrict the type parameter of Animal. ",Object(i.b)("strong",{parentName:"p"},"I love this because it gives me autocomplete for the tag name.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"type Animal<T extends TypeNames<typeof Animal> = undefined> = VariantOf<typeof Animal, T>;\n")),Object(i.b)("p",null,"Which is how we end up back here. You can pretty much stop at any point along this chain but you have to accept the caveats of doing so."),Object(i.b)("h3",{id:"why-is-this-necessary"},"Why is this necessary?"),Object(i.b)("p",null,"There are two separate ",Object(i.b)("strong",{parentName:"p"},"spaces")," in TypeScript\u2014the ",Object(i.b)("em",{parentName:"p"},"value")," space and the ",Object(i.b)("em",{parentName:"p"},"type")," space. If you want to bridge the gap between runtime state and compile-time types then you'll need to exist in both spaces and keep those definitions in sync. Classes do this, which is why you can assign a class to both a constant and a type. Technically they refer to different things (the constructor function vs. the structure of an instance of the class). ",Object(i.b)("strong",{parentName:"p"},"Variant works the same way")," but I'm not part of the TypeScript team so I can't just make the compiler do the book-keeping."))}s.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},b=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(n),m=a,d=b["".concat(o,".").concat(m)]||b[m]||u[m]||i;return n?r.a.createElement(d,c({ref:t},p,{components:n})):r.a.createElement(d,c({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);